// Use workflow.runName unless user specifies --run_name
params.outdir       = "results/run_${new Date().format('yyyyMMdd_HHmmss')}"
params.bobaseq_json = "$projectDir/shared/defaults/bobaseq_config.json"
params.oligo_path   = "$projectDir/shared/defaults/oligos.fasta"

docker.enabled      = true

process {
    cpus = 2
    memory = '1 GB'

    withName:downloadNcbiAssembly {
        container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/ncbi-download'
    }

    withName:designLibrary {
        container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/py-simulate'
        publishDir = [
            path: "${params.outdir}/simulation", mode: 'copy',
            saveAs: { filename -> filename == 'log.txt' ? 'log-simulate-library.txt' : null }
        ]
    }

    withName:simulatePacBioReads { container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/pbsim' }

    withName:runPbccs {
        container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/pbccs'
    }

    withName:simulateReads {
        publishDir = [
            path: "${params.outdir}/simulation", pattern: '*.t*', mode: 'copy',
            saveAs: { filename -> filename == 'log.txt' ? 'log-simulate-reads.txt' : filename }
        ]
        container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/py-simulate'
    }

    withName:multiCodes { container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/multicodes' }

    withName:bobaseqMap {
        publishDir = [path: "${params.outdir}", pattern: 'library', mode: 'copy']
        container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/bobaseq'
    }

    withName:bobaseqFitness {
        publishDir = [path: "${params.outdir}/fitness", pattern: 'top_proteins.tsv', mode: 'copy']
        container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/r-fitness'
    }

    withName:graphFitness {
        publishDir = [path: "${params.outdir}/fitness", mode: 'copy']
        container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/r-fitness'
    }
}
