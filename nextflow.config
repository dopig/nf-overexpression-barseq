// Use workflow.runName unless user specifies --run_name
params.run_name     = "run_${new Date().format('yyyyMMdd_HHmmss')}"
params.bobaseq_json = "$projectDir/shared/defaults/bobaseq_config.json"
params.oligo_path   = "$projectDir/shared/defaults/oligos.fasta"

params.ccs_cpus     = 2
docker.enabled      = true

params.s3_bucket    = "s3://nextflow-bucket-1" // Replace with your bucket's name!

aws { batch { cliPath = '/usr/local/bin/aws' } }
plugins { id 'nf-amazon' }

process.executor = 'local'

profiles {
    awsbatch {
        process.executor = 'awsbatch'
        workDir = "${params.s3_bucket}/work"
    }

    hybrid {
        process {
            executor = 'local'
            withName:runPbccs {
                    container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/pbccs'
                    executor = 'awsbatch'
            }
        }
    }

    local {
        aws {
            region = 'us-west-2'
            profile = 'nextflow-programmatic-access'
        }
        params.outdir = "results/${params.run_name}"
        workDir = "work"
    }

    ec2 {
        params.outdir = "${params.s3_bucket}/results/${params.run_name}"
    }
}

trace{
    enabled = true
    file = "${params.outdir}/nextflow_reports/trace.txt"
}

report {
    enabled = true
    file = "${params.outdir}/nextflow_reports/report.html"
}

process {
    cpus = 2
    memory = "2G"

    withName:downloadNcbiAssembly {
        container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/ncbi-download'
    }

    withName:designLibrary {
        container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/py-simulate'
        publishDir = [
            path: "${params.outdir}/simulation", mode: 'copy',
            saveAs: { filename -> filename == 'log.txt' ? 'log-simulate-library.txt' : null }
        ]
    }

    withName:simulatePacBioReads { container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/pbsim' }

    withName:runPbccs {
        container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/pbccs'
        cpus = params.ccs_cpus
        memory = "${params.ccs_cpus}G"
    }

    withName:simulateReads {
        publishDir = [
            path: "${params.outdir}/simulation", pattern: '*.t*', mode: 'copy',
            saveAs: { filename -> filename == 'log.txt' ? 'log-simulate-reads.txt' : filename }
        ]
        container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/py-simulate'
    }

    withName:multiCodes { container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/multicodes' }

    withName:bobaseqMap {
        publishDir = [path: "${params.outdir}", pattern: 'library', mode: 'copy']
        container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/bobaseq'
    }

    withName:bobaseqFitness {
        publishDir = [path: "${params.outdir}/fitness", pattern: 'top_proteins.tsv', mode: 'copy']
        container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/r-fitness'
    }

    withName:graphFitness {
        publishDir = [path: "${params.outdir}/fitness", mode: 'copy']
        container = 'public.ecr.aws/a8u1p4p7/nf-overexpression-barseq/r-fitness'
    }

    queue = 'nextflow-batch-queue-general'
}


